{"ast":null,"code":"var _jsxFileName = \"/Users/matteolobello/Developer/Matteo/ansa-reader/src/components/reading-view/ReadingView.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getArticleText } from \"../../api/api\";\nimport \"./ReadingView.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ReadingView = props => {\n  _s();\n\n  var _props$article;\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [text, setText] = useState();\n  useEffect(() => {\n    if (!props.article) {\n      setIsExpanded(false);\n      return;\n    }\n\n    setIsExpanded(true);\n\n    const fetchData = async () => {\n      var _fetchedText$replaceA, _fetchedText$replaceA2, _fetchedText$replaceA3;\n\n      const fetchedText = await getArticleText(props.article);\n      setText(fetchedText === null || fetchedText === void 0 ? void 0 : (_fetchedText$replaceA = fetchedText.replaceAll(/^\\s+|\\s+$/gm, \" \")) === null || _fetchedText$replaceA === void 0 ? void 0 : (_fetchedText$replaceA2 = _fetchedText$replaceA.replaceAll(/<\\/?[a-z][a-z0-9]*[^<>]*>/gi, \"\")) === null || _fetchedText$replaceA2 === void 0 ? void 0 : (_fetchedText$replaceA3 = _fetchedText$replaceA2.replaceAll(\"&nbsp;\", \"\")) === null || _fetchedText$replaceA3 === void 0 ? void 0 : _fetchedText$replaceA3.trim());\n    };\n\n    fetchData();\n  }, [props.article]);\n  useEffect(() => {\n    if (!isExpanded) {\n      setText(undefined);\n    }\n  }, [isExpanded, text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expanded-panel\",\n    style: {\n      transform: `translate(0, ${isExpanded ? \"0\" : \"100%\"})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close\",\n      onClick: () => setIsExpanded(false),\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), !text ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: (_props$article = props.article) === null || _props$article === void 0 ? void 0 : _props$article.link,\n        className: \"link\",\n        children: \"\\u2197 View on ansa.it\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadingView, \"fRIyXV9f/4psCPVi45ZhFhq8bhk=\");\n\n_c = ReadingView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadingView\");","map":{"version":3,"sources":["/Users/matteolobello/Developer/Matteo/ansa-reader/src/components/reading-view/ReadingView.tsx"],"names":["useEffect","useState","getArticleText","ReadingView","props","isExpanded","setIsExpanded","text","setText","article","fetchData","fetchedText","replaceAll","trim","undefined","transform","link"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAO,mBAAP;;;AAOA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAAA;;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAU,KAAV,CAA5C;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACI,KAAK,CAACK,OAAX,EAAoB;AAChBH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACA;AACH;;AAEDA,IAAAA,aAAa,CAAC,IAAD,CAAb;;AAEA,UAAMI,SAAS,GAAG,YAAY;AAAA;;AAC1B,YAAMC,WAAW,GAAG,MAAMT,cAAc,CAACE,KAAK,CAACK,OAAP,CAAxC;AACAD,MAAAA,OAAO,CACHG,WADG,aACHA,WADG,gDACHA,WAAW,CACLC,UADN,CACiB,aADjB,EACgC,GADhC,CADG,oFACH,sBAEMA,UAFN,CAEiB,6BAFjB,EAEgD,EAFhD,CADG,qFACH,uBAGMA,UAHN,CAGiB,QAHjB,EAG2B,EAH3B,CADG,2DACH,uBAIMC,IAJN,EADG,CAAP;AAOH,KATD;;AAWAH,IAAAA,SAAS;AACZ,GApBQ,EAoBN,CAACN,KAAK,CAACK,OAAP,CApBM,CAAT;AAsBAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACK,UAAL,EAAiB;AACbG,MAAAA,OAAO,CAACM,SAAD,CAAP;AACH;AACJ,GAJQ,EAIN,CAACT,UAAD,EAAaE,IAAb,CAJM,CAAT;AAMA,sBACI;AACI,IAAA,SAAS,EAAC,gBADd;AAEI,IAAA,KAAK,EAAE;AACHQ,MAAAA,SAAS,EAAG,gBAAeV,UAAU,GAAG,GAAH,GAAS,MAAO;AADlD,KAFX;AAAA,4BAMI;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAA0B,MAAA,OAAO,EAAE,MAAMC,aAAa,CAAC,KAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAUK,CAACC,IAAD,gBACG;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,gBAGG;AAAA,8BACI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA,kBAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,IAAI,oBAAEH,KAAK,CAACK,OAAR,mDAAE,eAAeO,IAAxB;AAA8B,QAAA,SAAS,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBAbR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CAvDM;;GAAMb,W;;KAAAA,W","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { getArticleText } from \"../../api/api\"\nimport { IArticle } from \"../../models/IArticle\"\nimport \"./ReadingView.css\"\n\ninterface IProps {\n    article?: IArticle\n    onClose: () => void\n}\n\nexport const ReadingView = (props: IProps) => {\n    const [isExpanded, setIsExpanded] = useState<boolean>(false)\n    const [text, setText] = useState<string>()\n\n    useEffect(() => {\n        if (!props.article) {\n            setIsExpanded(false)\n            return\n        }\n\n        setIsExpanded(true)\n\n        const fetchData = async () => {\n            const fetchedText = await getArticleText(props.article!)\n            setText(\n                fetchedText\n                    ?.replaceAll(/^\\s+|\\s+$/gm, \" \")\n                    ?.replaceAll(/<\\/?[a-z][a-z0-9]*[^<>]*>/gi, \"\")\n                    ?.replaceAll(\"&nbsp;\", \"\")\n                    ?.trim()\n            )\n        }\n\n        fetchData()\n    }, [props.article])\n\n    useEffect(() => {\n        if (!isExpanded) {\n            setText(undefined)\n        }\n    }, [isExpanded, text])\n\n    return (\n        <div\n            className=\"expanded-panel\"\n            style={{\n                transform: `translate(0, ${isExpanded ? \"0\" : \"100%\"})`,\n            }}\n        >\n            <button className=\"close\" onClick={() => setIsExpanded(false)}>\n                Close\n            </button>\n\n            {!text ? (\n                <span className=\"loading\">Loading...</span>\n            ) : (\n                <>\n                    <span className=\"text\">{text}</span>\n                    <a href={props.article?.link} className=\"link\">\n                        â†— View on ansa.it\n                    </a>\n                </>\n            )}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}