{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getArticleText } from \"../../api/api\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ReadingView = props => {\n  _s();\n\n  const [text, setText] = useState();\n  useEffect(() => {\n    if (!props.article) {\n      setText(undefined);\n      return;\n    }\n\n    const fetchData = async () => {\n      const fetchedText = await getArticleText(props.article);\n      setText(text);\n    };\n\n    fetchData();\n  }, [props.article]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ReadingView, \"8UpYhI3J5pvJeT2oodXc3gN/QPE=\");\n\n_c = ReadingView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadingView\");","map":{"version":3,"sources":["/Users/matteolobello/Developer/Matteo/ansa-reader/src/components/reading-view/ReadingView.tsx"],"names":["useEffect","useState","getArticleText","ReadingView","props","text","setText","article","undefined","fetchData","fetchedText"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;;;AAQA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AAAA;;AAC1C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACI,KAAK,CAACG,OAAX,EAAoB;AAChBD,MAAAA,OAAO,CAACE,SAAD,CAAP;AACA;AACH;;AAED,UAAMC,SAAS,GAAG,YAAY;AAC1B,YAAMC,WAAW,GAAG,MAAMR,cAAc,CAACE,KAAK,CAACG,OAAP,CAAxC;AACAD,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAHD;;AAKAI,IAAAA,SAAS;AACZ,GAZQ,EAYN,CAACL,KAAK,CAACG,OAAP,CAZM,CAAT;AAcA,sBAAO,qCAAP;AACH,CAlBM;;GAAMJ,W;;KAAAA,W","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { getArticleText } from \"../../api/api\"\nimport { IArticle } from \"../../models/IArticle\"\n\ninterface IProps {\n    article?: IArticle\n    onClose: () => void\n}\n\nexport const ReadingView = (props: IProps) => {\n    const [text, setText] = useState<string>()\n\n    useEffect(() => {\n        if (!props.article) {\n            setText(undefined)\n            return\n        }\n\n        const fetchData = async () => {\n            const fetchedText = await getArticleText(props.article!)\n            setText(text)\n        }\n\n        fetchData()\n    }, [props.article])\n\n    return <></>\n}\n"]},"metadata":{},"sourceType":"module"}